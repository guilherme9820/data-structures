/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package data.structures;

import data.structures.binaryTree.AVLTree;
import data.structures.binaryTree.BinaryTree;
import data.structures.binaryTree.IBinaryTree.SearchMode;
import data.structures.list.SinglyLinkedList;

public class App {

    static void testLinkedList() {
        SinglyLinkedList<Object> linkedlist = new SinglyLinkedList<>();

        System.out.println("APPEND");
        linkedlist.append("primeiro");
        linkedlist.append(2);
        linkedlist.append(true);
        linkedlist.append(40);
        linkedlist.printList();
        System.out.println("SIZE: " + linkedlist.size);
        System.out.println("HEAD: " + linkedlist.getHead());

        System.out.println("POP");
        System.out.println("REMOVED VALUE: " + linkedlist.pop(2));
        linkedlist.printList();
        System.out.println("REMOVED VALUE: " + linkedlist.pop(0));
        linkedlist.printList();
        System.out.println("REMOVED VALUE: " + linkedlist.pop(90));
        System.out.println("SIZE: " + linkedlist.size);
        System.out.println("HEAD: " + linkedlist.getHead());

        System.out.println("PREPEND");
        linkedlist.prepend("test");
        linkedlist.prepend(22);
        linkedlist.prepend(90);
        linkedlist.printList();
        System.out.println("SIZE: " + linkedlist.size);
        System.out.println("HEAD: " + linkedlist.getHead());

        System.out.println("REVERSED");
        linkedlist.reverse().printList();

    }

    static void testBinaryTree() {

        System.out.println("BINARY TREE");
        BinaryTree<Integer> binaryTree = new BinaryTree<Integer>();

        binaryTree.insert(47);
        binaryTree.insert(35);
        binaryTree.insert(40);
        binaryTree.insert(32);
        binaryTree.insert(42);
        binaryTree.insert(30);

        System.out.println("PREORDER");
        binaryTree.traverse(SearchMode.PREORDER);
        System.out.println("INORDER");
        binaryTree.traverse(SearchMode.INORDER);
        System.out.println("POSTORDER");
        binaryTree.traverse(SearchMode.POSTORDER);

        System.out.println("DELETION");
        binaryTree.delete(40);

        System.out.println("PREORDER");
        binaryTree.traverse(SearchMode.PREORDER);
        System.out.println("INORDER");
        binaryTree.traverse(SearchMode.INORDER);
        System.out.println("POSTORDER");
        binaryTree.traverse(SearchMode.POSTORDER);

        System.err.println("CONTAINS");
        System.out.println("Contains: " + 40 + "?" + binaryTree.contains((Integer) 40));
        System.out.println("Contains: " + 35 + "?" + binaryTree.contains(35));

    }

    static void testAVLTree() {

        System.out.println("AVL TREE");
        AVLTree<Integer> AVLTree = new AVLTree<Integer>();

        AVLTree.insert(47);
        AVLTree.insert(35);
        AVLTree.insert(40);
        AVLTree.insert(32);
        AVLTree.insert(42);
        AVLTree.insert(30);

        System.out.println("PREORDER");
        AVLTree.traverse(SearchMode.PREORDER);
        System.out.println("INORDER");
        AVLTree.traverse(SearchMode.INORDER);
        System.out.println("POSTORDER");
        AVLTree.traverse(SearchMode.POSTORDER);

        System.out.println("DELETION");
        AVLTree.delete(40);

        System.out.println("PREORDER");
        AVLTree.traverse(SearchMode.PREORDER);
        System.out.println("INORDER");
        AVLTree.traverse(SearchMode.INORDER);
        System.out.println("POSTORDER");
        AVLTree.traverse(SearchMode.POSTORDER);

        System.err.println("CONTAINS");
        System.out.println("Contains: " + 40 + "?" + AVLTree.contains((Integer) 40));
        System.out.println("Contains: " + 35 + "?" + AVLTree.contains(35));

    }

    public static void main(String[] args) {
        // testLinkedList();
        // testBinaryTree();
        testAVLTree();
    }
}
